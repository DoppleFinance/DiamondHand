{
  "address": "0x12764df3f4d136c5a82dc07E3E37b67C048c7783",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenRecovered",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolLimitPerUser",
          "type": "uint256"
        }
      ],
      "name": "NewPoolLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "NewRewardPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewStartAndEndBlocks",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RewardsStop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercentage",
          "type": "uint256"
        }
      ],
      "name": "SetPenaltyPercentage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBlocks",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBlocks",
          "type": "uint256"
        }
      ],
      "name": "SetPenaltyPeriodBlocks",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DIVIDEND_DEPLOYER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "adminWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasUserLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBEP20",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "contract IBEP20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusEndBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolLimitPerUser",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isUserInPenaltyPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "penalty",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyPeriodBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLimitPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentage",
          "type": "uint256"
        }
      ],
      "name": "setPenaltyPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocks",
          "type": "uint256"
        }
      ],
      "name": "setPenaltyPeriodBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasUserLimit",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_poolLimitPerUser",
          "type": "uint256"
        }
      ],
      "name": "updatePoolLimitPerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusEndBlock",
          "type": "uint256"
        }
      ],
      "name": "updateStartAndEndBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f81200102a7c5b65cf49c6c65cd1c8cf9f705864e317be5b20d7ceca600f7bc",
  "receipt": {
    "to": null,
    "from": "0xad1F66Acea98733D63cd8FC522118e4014Cb3F79",
    "contractAddress": "0x12764df3f4d136c5a82dc07E3E37b67C048c7783",
    "transactionIndex": 3,
    "gasUsed": "2070233",
    "logsBloom": "0x
    "blockHash": "0x1b3aadb173c5457b2402575ebb263e90e9caab192af2726c2503f655e20a7191",
    "transactionHash": "0x3f81200102a7c5b65cf49c6c65cd1c8cf9f705864e317be5b20d7ceca600f7bc",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 9814030,
        "transactionHash": "0x3f81200102a7c5b65cf49c6c65cd1c8cf9f705864e317be5b20d7ceca600f7bc",
        "address": "0x12764df3f4d136c5a82dc07E3E37b67C048c7783",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ad1f66acea98733d63cd8fc522118e4014cb3f79"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x1b3aadb173c5457b2402575ebb263e90e9caab192af2726c2503f655e20a7191"
      }
    ],
    "blockNumber": 9814030,
    "cumulativeGasUsed": "2228505",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8599c16d3ce702e0bf47c5bef950e4f6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"NewPoolLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"SetPenaltyPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBlocks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBlocks\",\"type\":\"uint256\"}],\"name\":\"SetPenaltyPeriodBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DIVIDEND_DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUserLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserInPenaltyPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"penalty\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLimitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setPenaltyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"setPenaltyPeriodBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasUserLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"updatePoolLimitPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address,uint256)\":{\"details\":\"This function is only callable by admin.\",\"params\":{\"_tokenAddress\":\": the address of the token to withdraw\",\"_tokenAmount\":\": the number of tokens to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"details\":\"This function is only callable by owner.\",\"params\":{\"_bonusEndBlock\":\": the new end block\",\"_startBlock\":\": the new start block\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverWrongTokens(address,uint256)\":{\"notice\":\"It allows the admin to recover wrong tokens sent to the contract\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"notice\":\"It allows the admin to update start and end blocks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DiamondHandInitializable.sol\":\"DiamondHandInitializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) =\\n            target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xbefeaa89bda4dccd5be4de1a2a0735b3d2f9ed1705f5805108ac0498cc4a534d\",\"license\":\"MIT\"},\"contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd3e88da8695a1d63936f7bbf3b3441056c44d167e679a80f9a1b5ffafb11fad9\",\"license\":\"MIT\"},\"contracts/DiamondHandInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeBEP20.sol\\\";\\nimport \\\"./IBEP20.sol\\\";\\n\\ncontract DiamondHandInitializable is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    // The address of the dividend deployer\\n    address public immutable DIVIDEND_DEPLOYER;\\n\\n    // Whether a limit is set for users\\n    bool public hasUserLimit;\\n\\n    // Whether it is initialized\\n    bool public isInitialized;\\n\\n    // Accrued token per share\\n    uint256 public accTokenPerShare;\\n\\n    // The block number when DOPPLE mining ends.\\n    uint256 public bonusEndBlock;\\n\\n    // The block number when DOPPLE mining starts.\\n    uint256 public startBlock;\\n\\n    // The block number of the last pool update\\n    uint256 public lastRewardBlock;\\n\\n    // The pool limit (0 if none)\\n    uint256 public poolLimitPerUser;\\n\\n    // DOPPLE tokens created per block.\\n    uint256 public rewardPerBlock;\\n\\n    // The precision factor\\n    uint256 public PRECISION_FACTOR;\\n\\n    // The reward token\\n    IBEP20 public rewardToken;\\n\\n    // The staked token\\n    IBEP20 public stakedToken;\\n\\n    // The remaining reward\\n    uint256 public stakingCount;\\n\\n    // The penalty reward blocks\\n    uint256 public penaltyPeriodBlocks;\\n\\n    // The penalty percentage\\n    uint256 public penaltyPercentage; //1e16 or 1%\\n\\n    // Info of each user that stakes tokens (stakedToken)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    struct UserInfo {\\n        uint256 amount; // How many staked tokens the user has provided\\n        uint256 rewardDebt; // Reward debt\\n        uint256 depositBlock; // Latest deposit block\\n    }\\n\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\n    event NewPoolLimit(uint256 poolLimitPerUser);\\n    event RewardsStop(uint256 blockNumber);\\n    event AdminWithdraw(uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event DepositReward(uint256 amount);\\n    event SetPenaltyPercentage(uint256 oldPercentage, uint256 newPercentage);\\n    event SetPenaltyPeriodBlocks(uint256 oldBlocks, uint256 newBlocks);\\n    event Harvest(address user);\\n\\n    constructor() public {\\n        DIVIDEND_DEPLOYER = msg.sender;\\n    }\\n\\n    /*\\n     * @notice Initialize the contract\\n     * @param _stakedToken: staked token address\\n     * @param _rewardToken: reward token address\\n     * @param _rewardPerBlock: reward per block (in rewardToken)\\n     * @param _startBlock: start block\\n     * @param _bonusEndBlock: end block\\n     * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\\n     * @param _admin: admin address with ownership\\n     */\\n    function initialize(\\n        IBEP20 _stakedToken,\\n        IBEP20 _rewardToken,\\n        uint256 _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock,\\n        uint256 _poolLimitPerUser,\\n        address _admin\\n    ) external {\\n        require(!isInitialized, \\\"DiamondHandInitializable::initialize: Already initialized\\\");\\n        require(msg.sender == DIVIDEND_DEPLOYER, \\\"DiamondHandInitializable::initialize: Not deployer\\\");\\n\\n        // Make this contract initialized\\n        isInitialized = true;\\n\\n        stakedToken = _stakedToken;\\n        rewardToken = _rewardToken;\\n        rewardPerBlock = _rewardPerBlock;\\n        startBlock = _startBlock;\\n        bonusEndBlock = _bonusEndBlock;\\n\\n        stakingCount = 0;\\n\\n        // Adjustable\\n        penaltyPeriodBlocks = 403200; // 14 days\\n        penaltyPercentage = 10000000000000000; // 1e16 or 1%\\n\\n        if (_poolLimitPerUser > 0) {\\n            hasUserLimit = true;\\n            poolLimitPerUser = _poolLimitPerUser;\\n        }\\n\\n        uint256 decimalsRewardToken = uint256(rewardToken.decimals());\\n        require(decimalsRewardToken < 30, \\\"DiamondHandInitializable::initialize: Must be inferior to 30\\\");\\n\\n        PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastRewardBlock = startBlock;\\n\\n        // Transfer ownership to the admin address who becomes owner of the contract\\n        transferOwnership(_admin);\\n    }\\n\\n    /*\\n     * @notice setPenaltyPeriodBlocks update penalty period blocks\\n     * @params _blocks penalty reward blocks\\n    */\\n\\n    function setPenaltyPeriodBlocks(uint256 _blocks) external onlyOwner {\\n        uint256 _oldPeriod = penaltyPeriodBlocks;\\n        penaltyPeriodBlocks = _blocks;\\n\\n        emit SetPenaltyPeriodBlocks(_oldPeriod, _blocks);\\n    }\\n\\n    /*\\n     * @notice setPenaltyPercentage update penalty percentage\\n     * @params _percentage penalty percentage in 1e18 decimals eg. 10000000000000000 or 1e16 is 1%\\n    */\\n\\n    function setPenaltyPercentage(uint256 _percentage) external onlyOwner {\\n        uint256 _oldPercentage = penaltyPercentage;\\n        penaltyPercentage = _percentage;\\n\\n        emit SetPenaltyPercentage(_oldPercentage, _percentage);\\n    }\\n\\n    /*\\n     * @notice isUserInPenaltyPeriod checks if user will get withdraw fee\\n     * @params _user user address\\n     * @returns penalty is user in penalty period\\n     */\\n    function isUserInPenaltyPeriod(address _user) public view returns (bool penalty) {\\n        UserInfo storage user = userInfo[_user];\\n        penalty = (block.number > user.depositBlock.add(penaltyPeriodBlocks));\\n    }\\n\\n    /*\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        if (hasUserLimit) {\\n            require(\\n                _amount.add(user.amount) <= poolLimitPerUser,\\n                \\\"User amount above limit\\\"\\n            );\\n        }\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount\\n                .mul(accTokenPerShare)\\n                .div(PRECISION_FACTOR)\\n                .sub(user.rewardDebt);\\n\\n            if (pending > 0) {\\n                rewardToken.safeTransfer(msg.sender, pending);\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.add(_amount);\\n            stakingCount = stakingCount.add(_amount);\\n\\n            stakedToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _amount\\n            );\\n        }\\n\\n        user.depositBlock = block.number;\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Deposit reward by admin\\n     * @param _amount: amount to deposit\\n     */\\n    function depositReward(uint256 _amount) external nonReentrant onlyOwner {\\n        require(rewardToken.balanceOf(msg.sender) >= _amount, \\\"DiamondHandInitializable::depositReward: Insufficient balance\\\");\\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit DepositReward(_amount);\\n    }\\n\\n    /*\\n     * @notice Harvest reward\\n     */\\n    function harvest() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        \\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending =\\n                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(\\n                    user.rewardDebt\\n                );\\n            if (pending > 0) {\\n                rewardToken.safeTransfer(msg.sender, pending);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n\\n        emit Harvest(msg.sender);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens and collect reward tokens\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"DiamondHandInitializable::withdraw: Amount to withdraw too high\\\");\\n\\n        _updatePool();\\n\\n        uint256 pending =\\n            user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(\\n                user.rewardDebt\\n            );\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            if (isUserInPenaltyPeriod(msg.sender)) {\\n                stakedToken.safeTransfer(msg.sender, _amount.mul(uint256(1e18).sub(penaltyPercentage)).div(1e18));\\n            } else {\\n                stakedToken.safeTransfer(msg.sender, _amount);\\n            }\\n\\n            stakingCount = stakingCount.sub(_amount);\\n        }\\n\\n        if (pending > 0) {\\n            rewardToken.safeTransfer(msg.sender, pending);\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Admin withdraw only reward token in emergency case. \\n     * @notice Admin cannot withdraw user's funds, SAFU!\\n     * @dev Needs to be for emergency.\\n     * @param _amount amount to withdraw\\n     */\\n    function adminWithdraw(uint256 _amount) external nonReentrant onlyOwner {\\n        require(_amount > 0, \\\"DiamondHandInitializable::adminWithdraw: _amount should be higher than 0\\\");\\n        require(_amount <= rewardToken.balanceOf(address(this)).sub(stakingCount), \\\"DiamondHandInitializable::adminWithdraw: _amount should be higher than 0\\\");\\n        rewardToken.safeTransfer(msg.sender, _amount);\\n\\n        emit AdminWithdraw(_amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens without caring about rewards rewards\\n     * @dev Needs to be for emergency.\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 amountToTransfer = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        if (amountToTransfer > 0) {\\n            if (isUserInPenaltyPeriod(msg.sender)) {\\n                stakedToken.safeTransfer(msg.sender, amountToTransfer.mul(uint256(1e18).sub(penaltyPercentage)).div(1e18));\\n            } else {\\n                stakedToken.safeTransfer(msg.sender, amountToTransfer);\\n            }\\n            stakingCount = stakingCount.sub(amountToTransfer);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, user.amount);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw\\n     * @param _tokenAmount: the number of tokens to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _tokenAddress != address(stakedToken),\\n            \\\"DiamondHandInitializable::recoverWrongTokens: Cannot be staked token\\\"\\n        );\\n        require(\\n            _tokenAddress != address(rewardToken),\\n            \\\"DiamondHandInitializable::recoverWrongTokens: Cannot be reward token\\\"\\n        );\\n\\n        IBEP20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner\\n     */\\n    function stopReward() external onlyOwner {\\n        bonusEndBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Update pool limit per user\\n     * @dev Only callable by owner.\\n     * @param _hasUserLimit: whether the limit remains forced\\n     * @param _poolLimitPerUser: new pool limit per user\\n     */\\n    function updatePoolLimitPerUser(\\n        bool _hasUserLimit,\\n        uint256 _poolLimitPerUser\\n    ) external onlyOwner {\\n        require(hasUserLimit, \\\"DiamondHandInitializable::updatePoolLimitPerUser: Must be set\\\");\\n        if (_hasUserLimit) {\\n            require(\\n                _poolLimitPerUser > poolLimitPerUser,\\n                \\\"DiamondHandInitializable::updatePoolLimitPerUser: New limit must be higher\\\"\\n            );\\n            poolLimitPerUser = _poolLimitPerUser;\\n        } else {\\n            hasUserLimit = _hasUserLimit;\\n            poolLimitPerUser = 0;\\n        }\\n        emit NewPoolLimit(poolLimitPerUser);\\n    }\\n\\n    /*\\n     * @notice Update reward per block\\n     * @dev Only callable by owner.\\n     * @param _rewardPerBlock: the reward per block\\n     */\\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        rewardPerBlock = _rewardPerBlock;\\n        emit NewRewardPerBlock(_rewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @dev This function is only callable by owner.\\n     * @param _startBlock: the new start block\\n     * @param _bonusEndBlock: the new end block\\n     */\\n    function updateStartAndEndBlocks(\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) external onlyOwner {\\n        require(\\n            _startBlock < _bonusEndBlock,\\n            \\\"DiamondHandInitializable::updateStartAndEndBlocks: New startBlock must be lower than new endBlock\\\"\\n        );\\n\\n        startBlock = _startBlock;\\n        bonusEndBlock = _bonusEndBlock;\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastRewardBlock = startBlock;\\n\\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\\n    }\\n\\n    /*\\n     * @notice View function to see pending reward on frontend.\\n     * @param _user: user address\\n     * @return Pending reward for a given user\\n     */\\n    function pendingReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 stakedTokenSupply = stakingCount;\\n        if (block.number > lastRewardBlock && stakedTokenSupply != 0) {\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\n            uint256 doppleReward = multiplier.mul(rewardPerBlock);\\n            uint256 adjustedTokenPerShare =\\n                accTokenPerShare.add(\\n                    doppleReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\\n                );\\n            return\\n                user\\n                    .amount\\n                    .mul(adjustedTokenPerShare)\\n                    .div(PRECISION_FACTOR)\\n                    .sub(user.rewardDebt);\\n        } else {\\n            return\\n                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(\\n                    user.rewardDebt\\n                );\\n        }\\n    }\\n\\n    /*\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 stakedTokenSupply = stakingCount;\\n\\n        if (stakedTokenSupply == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\n        uint256 doppleReward = multiplier.mul(rewardPerBlock);\\n        accTokenPerShare = accTokenPerShare.add(\\n            doppleReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\\n        );\\n        lastRewardBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Return reward multiplier over the given _from to _to block.\\n     * @param _from: block to start\\n     * @param _to: block to finish\\n     */\\n    function _getMultiplier(uint256 _from, uint256 _to)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= bonusEndBlock) {\\n            return _to.sub(_from);\\n        } else if (_from >= bonusEndBlock) {\\n            return 0;\\n        } else {\\n            return bonusEndBlock.sub(_from);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x112a166b8ac2b7fe7b4d921983314a5ac80aeca375336e18f7cd482e847ef97c\",\"license\":\"MIT\"},\"contracts/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\",\"keccak256\":\"0xd77c4bb2b9a7c35bd4f80335cedf09f51c8a61e3fbb41bed40839e7d90d1f8fa\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x200b195c37e92435437f9fcef7bc778194774ec955b4817b1f8df100e8ef3e40\",\"license\":\"MIT\"},\"contracts/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0xeeefba0b30f33050bff3aa63c63a88e55187537bdf206a251481399398d1bc28\",\"license\":\"MIT\"},\"contracts/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IBEP20.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(\\n                value,\\n                \\\"SafeBEP20: decreased allowance below zero\\\"\\n            );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata =\\n            address(token).functionCall(\\n                data,\\n                \\\"SafeBEP20: low-level call failed\\\"\\n            );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeBEP20: BEP20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\",\"keccak256\":\"0xb6d230e3e630b9771e7a587bf33b6e03dc53e44fd3fbe5e3c1658d7c875f1610\",\"license\":\"MIT\"},\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (bool, uint256)\\n    {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0xdc758348561870a0ec2e629d13f180302fbab381a794b515e8932f3d1ba28420\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50600061001b610075565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180553360601b608052610079565b3390565b60805160601c6123ae61009b600039806105de528061105c52506123ae6000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806380dc067211610125578063b6b55f25116100ad578063db2e21bc1161007c578063db2e21bc146104c6578063e00e3ecd146104ce578063f2fde38b146104eb578063f40f0f5214610511578063f7c618c11461053757610211565b8063b6b55f2514610473578063bdf4fd9014610490578063cc7a262e146104b6578063ccd34cd5146104be57610211565b80638f662915116100f45780638f6629151461041357806392e8990e1461041b5780639513997f14610423578063a0b4090514610446578063a9f8d1811461046b57610211565b806380dc0672146103ab57806383a5041c146103b35780638ae39cac146104035780638da5cb5b1461040b57610211565b80632e1a7d4d116101a85780634641257d116101775780634641257d1461036e57806348cd4cb11461037657806366fe9f8a1461037e578063715018a6146103865780637c5b4a371461038e57610211565b80632e1a7d4d146102ec5780632f4d4e3114610309578063392e53cd146103265780633f138d4b1461034257610211565b806315908d51116101e457806315908d511461027b5780631959a002146102835780631aed6553146102c75780631e2720ff146102cf57610211565b806301f8a97614610216578063037624f3146102355780630b71a37d146102595780630c540e1414610273575b600080fd5b6102336004803603602081101561022c57600080fd5b503561053f565b005b61023d6105dc565b604080516001600160a01b039092168252519081900360200190f35b610261610600565b60408051918252519081900360200190f35b610261610606565b61026161060c565b6102a96004803603602081101561029957600080fd5b50356001600160a01b0316610612565b60408051938452602084019290925282820152519081900360600190f35b610261610633565b610233600480360360208110156102e557600080fd5b5035610639565b6102336004803603602081101561030257600080fd5b50356107eb565b6102336004803603602081101561031f57600080fd5b50356109d5565b61032e610a7e565b604080519115158252519081900360200190f35b6102336004803603604081101561035857600080fd5b506001600160a01b038135169060200135610a8c565b610233610be4565b610261610ced565b610261610cf3565b610233610cf9565b610233600480360360208110156103a457600080fd5b5035610da5565b610233610fa2565b610233600480360360e08110156103c957600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359160c0909101351661100a565b610261611215565b61023d61121b565b61026161122a565b61032e611230565b6102336004803603604081101561043957600080fd5b5080359060200135611239565b6102336004803603604081101561045c57600080fd5b50803515159060200135611327565b610261611467565b6102336004803603602081101561048957600080fd5b503561146d565b61032e600480360360208110156104a657600080fd5b50356001600160a01b031661162b565b61023d61165d565b61026161166c565b610233611672565b610233600480360360208110156104e457600080fd5b5035611792565b6102336004803603602081101561050157600080fd5b50356001600160a01b031661183b565b6102616004803603602081101561052757600080fd5b50356001600160a01b031661193d565b61023d611a21565b610547611a30565b6001600160a01b031661055861121b565b6001600160a01b0316146105a1576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b60088190556040805182815290517f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df9181900360200190a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b600d5481565b600c5481565b600e5481565b600f6020526000908152604090208054600182015460029092015490919083565b60045481565b6002600154141561067f576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b600260015561068c611a30565b6001600160a01b031661069d61121b565b6001600160a01b0316146106e6576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b600a54604080516370a0823160e01b8152336004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d602081101561075a57600080fd5b505110156107995760405162461bcd60e51b815260040180806020018281038252603a815260200180612310603a913960400191505060405180910390fd5b600a546107b1906001600160a01b0316333084611a34565b6040805182815290517f19d619b124479c2d70fdcdb33644246ae36f947e11b9612f998df529be9e54b69181900360200190a15060018055565b60026001541415610831576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b6002600155336000908152600f6020526040902080548211156108855760405162461bcd60e51b815260040180806020018281038252603c815260200180612089603c913960400191505060405180910390fd5b61088d611a94565b60006108c282600101546108bc6009546108b66003548760000154611b0690919063ffffffff16565b90611b68565b90611bcf565b9050821561095d5781546108d69084611bcf565b82556108e13361162b565b15610935576109303361091d670de0b6b3a76400006108b6610916600e54670de0b6b3a7640000611bcf90919063ffffffff16565b8890611b06565b600b546001600160a01b03169190611c2c565b61094c565b600b5461094c906001600160a01b03163385611c2c565b600c546109599084611bcf565b600c555b801561097a57600a5461097a906001600160a01b03163383611c2c565b600954600354835461099192916108b69190611b06565b600183015560408051848152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a250506001805550565b6109dd611a30565b6001600160a01b03166109ee61121b565b6001600160a01b031614610a37576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b600d805490829055604080518281526020810184905281517f127dc83d857a4bc6af9d4a38626330f1ffd556e597408dc310b9edfd5386a61b929181900390910190a15050565b600254610100900460ff1681565b610a94611a30565b6001600160a01b0316610aa561121b565b6001600160a01b031614610aee576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b600b546001600160a01b0383811691161415610b3b5760405162461bcd60e51b815260040180806020018281038252604181526020018061228e6041913960600191505060405180910390fd5b600a546001600160a01b0383811691161415610b885760405162461bcd60e51b81526004018080602001828103825260418152602001806121736041913960600191505060405180910390fd5b610b9c6001600160a01b0383163383611c2c565b604080516001600160a01b03841681526020810183905281517f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab78129929181900390910190a15050565b60026001541415610c2a576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b6002600155336000908152600f60205260409020610c46611a94565b805415610c97576000610c7682600101546108bc6009546108b66003548760000154611b0690919063ffffffff16565b90508015610c9557600a54610c95906001600160a01b03163383611c2c565b505b6009546003548254610cae92916108b69190611b06565b60018201556040805133815290517f188a622567eeca997c3d494fd65f76ca910b90a50a0c44d5e37b2ea5539e027b9181900360200190a15060018055565b60055481565b60075481565b610d01611a30565b6001600160a01b0316610d1261121b565b6001600160a01b031614610d5b576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60026001541415610deb576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b6002600155610df8611a30565b6001600160a01b0316610e0961121b565b6001600160a01b031614610e52576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b60008111610e915760405162461bcd60e51b81526004018080602001828103825260458152602001806122106045913960600191505060405180910390fd5b600c54600a54604080516370a0823160e01b81523060048201529051610f1393926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610ee157600080fd5b505afa158015610ef5573d6000803e3d6000fd5b505050506040513d6020811015610f0b57600080fd5b505190611bcf565b811115610f515760405162461bcd60e51b81526004018080602001828103825260458152602001806122106045913960600191505060405180910390fd5b600a54610f68906001600160a01b03163383611c2c565b6040805182815290517f0c19c6325aefe1fa748b9a79e9fc092a292bb370d2a5a0d13f138bb8f46429da9181900360200190a15060018055565b610faa611a30565b6001600160a01b0316610fbb61121b565b6001600160a01b031614611004576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b43600455565b600254610100900460ff16156110515760405162461bcd60e51b81526004018080602001828103825260368152602001806121b46036913960400191505060405180910390fd5b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110b85760405162461bcd60e51b815260040180806020018281038252602f81526020018061234a602f913960400191505060405180910390fd5b6002805461ff001916610100179055600b80546001600160a01b03808a166001600160a01b031992831617909255600a8054928916929091169190911790556008859055600584905560048390556000600c5562062700600d55662386f26fc10000600e558115611136576002805460ff1916600117905560078290555b600a546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561117b57600080fd5b505afa15801561118f573d6000803e3d6000fd5b505050506040513d60208110156111a557600080fd5b505160ff169050601e81106111eb5760405162461bcd60e51b81526004018080602001828103825260398152602001806122556039913960400191505060405180910390fd5b6111f6601e82611bcf565b600a0a60095560055460065561120b8261183b565b5050505050505050565b60085481565b6000546001600160a01b031690565b60035481565b60025460ff1681565b611241611a30565b6001600160a01b031661125261121b565b6001600160a01b03161461129b576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b8082106112d95760405162461bcd60e51b815260040180806020018281038252605e815260200180612115605e913960600191505060405180910390fd5b600582905560048190556006829055604080518381526020810183905281517f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce06929181900390910190a15050565b61132f611a30565b6001600160a01b031661134061121b565b6001600160a01b031614611389576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b60025460ff166113ca5760405162461bcd60e51b815260040180806020018281038252603a815260200180611fe8603a913960400191505060405180910390fd5b811561141a5760075481116114105760405162461bcd60e51b81526004018080602001828103825260478152602001806120226047913960600191505060405180910390fd5b600781905561142e565b6002805460ff191683151517905560006007555b60075460408051918252517f241f67ee5f41b7a5cabf911367329be7215900f602ebfc47f89dce2a6bcd847c9181900360200190a15050565b60065481565b600260015414156114b3576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b60026001819055336000908152600f60205260409020905460ff16156115365760075481546114e3908490611c83565b1115611536576040805162461bcd60e51b815260206004820152601760248201527f5573657220616d6f756e742061626f7665206c696d6974000000000000000000604482015290519081900360640190fd5b61153e611a94565b80541561158f57600061156e82600101546108bc6009546108b66003548760000154611b0690919063ffffffff16565b9050801561158d57600a5461158d906001600160a01b03163383611c2c565b505b81156115cb5780546115a19083611c83565b8155600c546115b09083611c83565b600c55600b546115cb906001600160a01b0316333085611a34565b43600282015560095460035482546115e892916108b69190611b06565b600182015560408051838152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a2505060018055565b6001600160a01b0381166000908152600f60205260408120600d54600282015461165491611c83565b43119392505050565b600b546001600160a01b031681565b60095481565b600260015414156116b8576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b60026001908155336000908152600f60205260408120805482825592810191909155908015611753576116ea3361162b565b1561172b576117263361091d670de0b6b3a76400006108b661171f600e54670de0b6b3a7640000611bcf90919063ffffffff16565b8690611b06565b611742565b600b54611742906001600160a01b03163383611c2c565b600c5461174f9082611bcf565b600c555b8154604080519182525133917f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695919081900360200190a2505060018055565b61179a611a30565b6001600160a01b03166117ab61121b565b6001600160a01b0316146117f4576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b600e805490829055604080518281526020810184905281517f67ac5c37abfa810c9a84c1050cdf000d57e46077319beb09fd91ee835b6d4418929181900390910190a15050565b611843611a30565b6001600160a01b031661185461121b565b6001600160a01b03161461189d576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b6001600160a01b0381166118e25760405162461bcd60e51b81526004018080602001828103825260268152602001806120ef6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600f60205260408120600c546006544311801561196857508015155b156119f057600061197b60065443611cdd565b9050600061199460085483611b0690919063ffffffff16565b905060006119bd6119b4856108b660095486611b0690919063ffffffff16565b60035490611c83565b90506119e485600101546108bc6009546108b6858a60000154611b0690919063ffffffff16565b95505050505050611a1c565b611a1782600101546108bc6009546108b66003548760000154611b0690919063ffffffff16565b925050505b919050565b600a546001600160a01b031681565b3390565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611a8e908590611d17565b50505050565b6006544311611aa257611b04565b600c5480611ab4575043600655611b04565b6000611ac260065443611cdd565b90506000611adb60085483611b0690919063ffffffff16565b9050611af96119b4846108b660095485611b0690919063ffffffff16565b600355505043600655505b565b600082611b1557506000611b62565b82820282848281611b2257fe5b0414611b5f5760405162461bcd60e51b81526004018080602001828103825260218152602001806122cf6021913960400191505060405180910390fd5b90505b92915050565b6000808211611bbe576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611bc757fe5b049392505050565b600082821115611c26576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611c7e908490611d17565b505050565b600082820183811015611b5f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006004548211611cf957611cf28284611bcf565b9050611b62565b6004548310611d0a57506000611b62565b600454611cf29084611bcf565b6060611d6c826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611dc89092919063ffffffff16565b805190915015611c7e57808060200190516020811015611d8b57600080fd5b5051611c7e5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120c5602a913960400191505060405180910390fd5b6060611dd78484600085611de1565b90505b9392505050565b606082471015611e225760405162461bcd60e51b81526004018080602001828103825260268152602001806121ea6026913960400191505060405180910390fd5b611e2b85611f3d565b611e7c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611ebb5780518252601f199092019160209182019101611e9c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611f1d576040519150601f19603f3d011682016040523d82523d6000602084013e611f22565b606091505b5091509150611f32828286611f43565b979650505050505050565b3b151590565b60608315611f52575081611dda565b825115611f625782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fac578181015183820152602001611f94565b50505050905090810190601f168015611fd95780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4469766964656e64496e697469616c697a61626c653a3a757064617465506f6f6c4c696d6974506572557365723a204d757374206265207365744469766964656e64496e697469616c697a61626c653a3a757064617465506f6f6c4c696d6974506572557365723a204e6577206c696d6974206d757374206265206869676865725265656e7472616e637947756172643a207265656e7472616e742063616c6c004469766964656e64496e697469616c697a61626c653a3a77697468647261773a20416d6f756e7420746f20776974686472617720746f6f20686967685361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734469766964656e64496e697469616c697a61626c653a3a7570646174655374617274416e64456e64426c6f636b733a204e6577207374617274426c6f636b206d757374206265206c6f776572207468616e206e657720656e64426c6f636b4469766964656e64496e697469616c697a61626c653a3a7265636f76657257726f6e67546f6b656e733a2043616e6e6f742062652072657761726420746f6b656e4469766964656e64496e697469616c697a61626c653a3a696e697469616c697a653a20416c726561647920696e697469616c697a6564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4469766964656e64496e697469616c697a61626c653a3a61646d696e57697468647261773a205f616d6f756e742073686f756c6420626520686967686572207468616e20304469766964656e64496e697469616c697a61626c653a3a696e697469616c697a653a204d75737420626520696e666572696f7220746f2033304469766964656e64496e697469616c697a61626c653a3a7265636f76657257726f6e67546f6b656e733a2043616e6e6f74206265207374616b656420746f6b656e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724469766964656e64496e697469616c697a61626c653a3a6465706f7369745265776172643a20496e73756666696369656e742062616c616e63654469766964656e64496e697469616c697a61626c653a3a696e697469616c697a653a204e6f74206465706c6f796572a264697066735822122074f8c891823eb5fbe6704dff1449759e5898d64c3394ec3e5ed90c2c40c2e8ad64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c806380dc067211610125578063b6b55f25116100ad578063db2e21bc1161007c578063db2e21bc146104c6578063e00e3ecd146104ce578063f2fde38b146104eb578063f40f0f5214610511578063f7c618c11461053757610211565b8063b6b55f2514610473578063bdf4fd9014610490578063cc7a262e146104b6578063ccd34cd5146104be57610211565b80638f662915116100f45780638f6629151461041357806392e8990e1461041b5780639513997f14610423578063a0b4090514610446578063a9f8d1811461046b57610211565b806380dc0672146103ab57806383a5041c146103b35780638ae39cac146104035780638da5cb5b1461040b57610211565b80632e1a7d4d116101a85780634641257d116101775780634641257d1461036e57806348cd4cb11461037657806366fe9f8a1461037e578063715018a6146103865780637c5b4a371461038e57610211565b80632e1a7d4d146102ec5780632f4d4e3114610309578063392e53cd146103265780633f138d4b1461034257610211565b806315908d51116101e457806315908d511461027b5780631959a002146102835780631aed6553146102c75780631e2720ff146102cf57610211565b806301f8a97614610216578063037624f3146102355780630b71a37d146102595780630c540e1414610273575b600080fd5b6102336004803603602081101561022c57600080fd5b503561053f565b005b61023d6105dc565b604080516001600160a01b039092168252519081900360200190f35b610261610600565b60408051918252519081900360200190f35b610261610606565b61026161060c565b6102a96004803603602081101561029957600080fd5b50356001600160a01b0316610612565b60408051938452602084019290925282820152519081900360600190f35b610261610633565b610233600480360360208110156102e557600080fd5b5035610639565b6102336004803603602081101561030257600080fd5b50356107eb565b6102336004803603602081101561031f57600080fd5b50356109d5565b61032e610a7e565b604080519115158252519081900360200190f35b6102336004803603604081101561035857600080fd5b506001600160a01b038135169060200135610a8c565b610233610be4565b610261610ced565b610261610cf3565b610233610cf9565b610233600480360360208110156103a457600080fd5b5035610da5565b610233610fa2565b610233600480360360e08110156103c957600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359160c0909101351661100a565b610261611215565b61023d61121b565b61026161122a565b61032e611230565b6102336004803603604081101561043957600080fd5b5080359060200135611239565b6102336004803603604081101561045c57600080fd5b50803515159060200135611327565b610261611467565b6102336004803603602081101561048957600080fd5b503561146d565b61032e600480360360208110156104a657600080fd5b50356001600160a01b031661162b565b61023d61165d565b61026161166c565b610233611672565b610233600480360360208110156104e457600080fd5b5035611792565b6102336004803603602081101561050157600080fd5b50356001600160a01b031661183b565b6102616004803603602081101561052757600080fd5b50356001600160a01b031661193d565b61023d611a21565b610547611a30565b6001600160a01b031661055861121b565b6001600160a01b0316146105a1576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b60088190556040805182815290517f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df9181900360200190a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b600d5481565b600c5481565b600e5481565b600f6020526000908152604090208054600182015460029092015490919083565b60045481565b6002600154141561067f576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b600260015561068c611a30565b6001600160a01b031661069d61121b565b6001600160a01b0316146106e6576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b600a54604080516370a0823160e01b8152336004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561073057600080fd5b505afa158015610744573d6000803e3d6000fd5b505050506040513d602081101561075a57600080fd5b505110156107995760405162461bcd60e51b815260040180806020018281038252603a815260200180612310603a913960400191505060405180910390fd5b600a546107b1906001600160a01b0316333084611a34565b6040805182815290517f19d619b124479c2d70fdcdb33644246ae36f947e11b9612f998df529be9e54b69181900360200190a15060018055565b60026001541415610831576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b6002600155336000908152600f6020526040902080548211156108855760405162461bcd60e51b815260040180806020018281038252603c815260200180612089603c913960400191505060405180910390fd5b61088d611a94565b60006108c282600101546108bc6009546108b66003548760000154611b0690919063ffffffff16565b90611b68565b90611bcf565b9050821561095d5781546108d69084611bcf565b82556108e13361162b565b15610935576109303361091d670de0b6b3a76400006108b6610916600e54670de0b6b3a7640000611bcf90919063ffffffff16565b8890611b06565b600b546001600160a01b03169190611c2c565b61094c565b600b5461094c906001600160a01b03163385611c2c565b600c546109599084611bcf565b600c555b801561097a57600a5461097a906001600160a01b03163383611c2c565b600954600354835461099192916108b69190611b06565b600183015560408051848152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a250506001805550565b6109dd611a30565b6001600160a01b03166109ee61121b565b6001600160a01b031614610a37576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b600d805490829055604080518281526020810184905281517f127dc83d857a4bc6af9d4a38626330f1ffd556e597408dc310b9edfd5386a61b929181900390910190a15050565b600254610100900460ff1681565b610a94611a30565b6001600160a01b0316610aa561121b565b6001600160a01b031614610aee576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b600b546001600160a01b0383811691161415610b3b5760405162461bcd60e51b815260040180806020018281038252604181526020018061228e6041913960600191505060405180910390fd5b600a546001600160a01b0383811691161415610b885760405162461bcd60e51b81526004018080602001828103825260418152602001806121736041913960600191505060405180910390fd5b610b9c6001600160a01b0383163383611c2c565b604080516001600160a01b03841681526020810183905281517f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab78129929181900390910190a15050565b60026001541415610c2a576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b6002600155336000908152600f60205260409020610c46611a94565b805415610c97576000610c7682600101546108bc6009546108b66003548760000154611b0690919063ffffffff16565b90508015610c9557600a54610c95906001600160a01b03163383611c2c565b505b6009546003548254610cae92916108b69190611b06565b60018201556040805133815290517f188a622567eeca997c3d494fd65f76ca910b90a50a0c44d5e37b2ea5539e027b9181900360200190a15060018055565b60055481565b60075481565b610d01611a30565b6001600160a01b0316610d1261121b565b6001600160a01b031614610d5b576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60026001541415610deb576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b6002600155610df8611a30565b6001600160a01b0316610e0961121b565b6001600160a01b031614610e52576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b60008111610e915760405162461bcd60e51b81526004018080602001828103825260458152602001806122106045913960600191505060405180910390fd5b600c54600a54604080516370a0823160e01b81523060048201529051610f1393926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610ee157600080fd5b505afa158015610ef5573d6000803e3d6000fd5b505050506040513d6020811015610f0b57600080fd5b505190611bcf565b811115610f515760405162461bcd60e51b81526004018080602001828103825260458152602001806122106045913960600191505060405180910390fd5b600a54610f68906001600160a01b03163383611c2c565b6040805182815290517f0c19c6325aefe1fa748b9a79e9fc092a292bb370d2a5a0d13f138bb8f46429da9181900360200190a15060018055565b610faa611a30565b6001600160a01b0316610fbb61121b565b6001600160a01b031614611004576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b43600455565b600254610100900460ff16156110515760405162461bcd60e51b81526004018080602001828103825260368152602001806121b46036913960400191505060405180910390fd5b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110b85760405162461bcd60e51b815260040180806020018281038252602f81526020018061234a602f913960400191505060405180910390fd5b6002805461ff001916610100179055600b80546001600160a01b03808a166001600160a01b031992831617909255600a8054928916929091169190911790556008859055600584905560048390556000600c5562062700600d55662386f26fc10000600e558115611136576002805460ff1916600117905560078290555b600a546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561117b57600080fd5b505afa15801561118f573d6000803e3d6000fd5b505050506040513d60208110156111a557600080fd5b505160ff169050601e81106111eb5760405162461bcd60e51b81526004018080602001828103825260398152602001806122556039913960400191505060405180910390fd5b6111f6601e82611bcf565b600a0a60095560055460065561120b8261183b565b5050505050505050565b60085481565b6000546001600160a01b031690565b60035481565b60025460ff1681565b611241611a30565b6001600160a01b031661125261121b565b6001600160a01b03161461129b576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b8082106112d95760405162461bcd60e51b815260040180806020018281038252605e815260200180612115605e913960600191505060405180910390fd5b600582905560048190556006829055604080518381526020810183905281517f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce06929181900390910190a15050565b61132f611a30565b6001600160a01b031661134061121b565b6001600160a01b031614611389576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b60025460ff166113ca5760405162461bcd60e51b815260040180806020018281038252603a815260200180611fe8603a913960400191505060405180910390fd5b811561141a5760075481116114105760405162461bcd60e51b81526004018080602001828103825260478152602001806120226047913960600191505060405180910390fd5b600781905561142e565b6002805460ff191683151517905560006007555b60075460408051918252517f241f67ee5f41b7a5cabf911367329be7215900f602ebfc47f89dce2a6bcd847c9181900360200190a15050565b60065481565b600260015414156114b3576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b60026001819055336000908152600f60205260409020905460ff16156115365760075481546114e3908490611c83565b1115611536576040805162461bcd60e51b815260206004820152601760248201527f5573657220616d6f756e742061626f7665206c696d6974000000000000000000604482015290519081900360640190fd5b61153e611a94565b80541561158f57600061156e82600101546108bc6009546108b66003548760000154611b0690919063ffffffff16565b9050801561158d57600a5461158d906001600160a01b03163383611c2c565b505b81156115cb5780546115a19083611c83565b8155600c546115b09083611c83565b600c55600b546115cb906001600160a01b0316333085611a34565b43600282015560095460035482546115e892916108b69190611b06565b600182015560408051838152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a2505060018055565b6001600160a01b0381166000908152600f60205260408120600d54600282015461165491611c83565b43119392505050565b600b546001600160a01b031681565b60095481565b600260015414156116b8576040805162461bcd60e51b815260206004820152601f6024820152600080516020612069833981519152604482015290519081900360640190fd5b60026001908155336000908152600f60205260408120805482825592810191909155908015611753576116ea3361162b565b1561172b576117263361091d670de0b6b3a76400006108b661171f600e54670de0b6b3a7640000611bcf90919063ffffffff16565b8690611b06565b611742565b600b54611742906001600160a01b03163383611c2c565b600c5461174f9082611bcf565b600c555b8154604080519182525133917f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695919081900360200190a2505060018055565b61179a611a30565b6001600160a01b03166117ab61121b565b6001600160a01b0316146117f4576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b600e805490829055604080518281526020810184905281517f67ac5c37abfa810c9a84c1050cdf000d57e46077319beb09fd91ee835b6d4418929181900390910190a15050565b611843611a30565b6001600160a01b031661185461121b565b6001600160a01b03161461189d576040805162461bcd60e51b815260206004820181905260248201526000805160206122f0833981519152604482015290519081900360640190fd5b6001600160a01b0381166118e25760405162461bcd60e51b81526004018080602001828103825260268152602001806120ef6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600f60205260408120600c546006544311801561196857508015155b156119f057600061197b60065443611cdd565b9050600061199460085483611b0690919063ffffffff16565b905060006119bd6119b4856108b660095486611b0690919063ffffffff16565b60035490611c83565b90506119e485600101546108bc6009546108b6858a60000154611b0690919063ffffffff16565b95505050505050611a1c565b611a1782600101546108bc6009546108b66003548760000154611b0690919063ffffffff16565b925050505b919050565b600a546001600160a01b031681565b3390565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611a8e908590611d17565b50505050565b6006544311611aa257611b04565b600c5480611ab4575043600655611b04565b6000611ac260065443611cdd565b90506000611adb60085483611b0690919063ffffffff16565b9050611af96119b4846108b660095485611b0690919063ffffffff16565b600355505043600655505b565b600082611b1557506000611b62565b82820282848281611b2257fe5b0414611b5f5760405162461bcd60e51b81526004018080602001828103825260218152602001806122cf6021913960400191505060405180910390fd5b90505b92915050565b6000808211611bbe576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611bc757fe5b049392505050565b600082821115611c26576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611c7e908490611d17565b505050565b600082820183811015611b5f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006004548211611cf957611cf28284611bcf565b9050611b62565b6004548310611d0a57506000611b62565b600454611cf29084611bcf565b6060611d6c826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611dc89092919063ffffffff16565b805190915015611c7e57808060200190516020811015611d8b57600080fd5b5051611c7e5760405162461bcd60e51b815260040180806020018281038252602a8152602001806120c5602a913960400191505060405180910390fd5b6060611dd78484600085611de1565b90505b9392505050565b606082471015611e225760405162461bcd60e51b81526004018080602001828103825260268152602001806121ea6026913960400191505060405180910390fd5b611e2b85611f3d565b611e7c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310611ebb5780518252601f199092019160209182019101611e9c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611f1d576040519150601f19603f3d011682016040523d82523d6000602084013e611f22565b606091505b5091509150611f32828286611f43565b979650505050505050565b3b151590565b60608315611f52575081611dda565b825115611f625782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fac578181015183820152602001611f94565b50505050905090810190601f168015611fd95780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4469766964656e64496e697469616c697a61626c653a3a757064617465506f6f6c4c696d6974506572557365723a204d757374206265207365744469766964656e64496e697469616c697a61626c653a3a757064617465506f6f6c4c696d6974506572557365723a204e6577206c696d6974206d757374206265206869676865725265656e7472616e637947756172643a207265656e7472616e742063616c6c004469766964656e64496e697469616c697a61626c653a3a77697468647261773a20416d6f756e7420746f20776974686472617720746f6f20686967685361666542455032303a204245503230206f7065726174696f6e20646964206e6f7420737563636565644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734469766964656e64496e697469616c697a61626c653a3a7570646174655374617274416e64456e64426c6f636b733a204e6577207374617274426c6f636b206d757374206265206c6f776572207468616e206e657720656e64426c6f636b4469766964656e64496e697469616c697a61626c653a3a7265636f76657257726f6e67546f6b656e733a2043616e6e6f742062652072657761726420746f6b656e4469766964656e64496e697469616c697a61626c653a3a696e697469616c697a653a20416c726561647920696e697469616c697a6564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4469766964656e64496e697469616c697a61626c653a3a61646d696e57697468647261773a205f616d6f756e742073686f756c6420626520686967686572207468616e20304469766964656e64496e697469616c697a61626c653a3a696e697469616c697a653a204d75737420626520696e666572696f7220746f2033304469766964656e64496e697469616c697a61626c653a3a7265636f76657257726f6e67546f6b656e733a2043616e6e6f74206265207374616b656420746f6b656e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724469766964656e64496e697469616c697a61626c653a3a6465706f7369745265776172643a20496e73756666696369656e742062616c616e63654469766964656e64496e697469616c697a61626c653a3a696e697469616c697a653a204e6f74206465706c6f796572a264697066735822122074f8c891823eb5fbe6704dff1449759e5898d64c3394ec3e5ed90c2c40c2e8ad64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address,uint256)": {
        "details": "This function is only callable by admin.",
        "params": {
          "_tokenAddress": ": the address of the token to withdraw",
          "_tokenAmount": ": the number of tokens to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "details": "This function is only callable by owner.",
        "params": {
          "_bonusEndBlock": ": the new end block",
          "_startBlock": ": the new start block"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverWrongTokens(address,uint256)": {
        "notice": "It allows the admin to recover wrong tokens sent to the contract"
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "notice": "It allows the admin to update start and end blocks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1564,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1677,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 339,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "hasUserLimit",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 341,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "isInitialized",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 343,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "accTokenPerShare",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 345,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "bonusEndBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 347,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "startBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 349,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "lastRewardBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 351,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "poolLimitPerUser",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 353,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 355,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "PRECISION_FACTOR",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 357,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IBEP20)1556"
      },
      {
        "astId": 359,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "stakedToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IBEP20)1556"
      },
      {
        "astId": 361,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "stakingCount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 363,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "penaltyPeriodBlocks",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 365,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "penaltyPercentage",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 369,
        "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
        "label": "userInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(UserInfo)376_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBEP20)1556": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)376_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DiamondHandInitializable.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)376_storage"
      },
      "t_struct(UserInfo)376_storage": {
        "encoding": "inplace",
        "label": "struct DiamondHandInitializable.UserInfo",
        "members": [
          {
            "astId": 371,
            "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 373,
            "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 375,
            "contract": "contracts/DiamondHandInitializable.sol:DiamondHandInitializable",
            "label": "depositBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}